import fs from 'fs/promises';
/**
 * A class for reading, writing, and appending data to a file.
 */
class IO {
  /**
   * The name of the file to read, write, or append to.
   */
  private fileName: string;

  /**
   * The encoding to use when reading, writing, or appending to the file.
   */
  private encoding: BufferEncoding;

  /**
   * Creates a new instance of the FileJS class.
   * @param fileName The name of the file to read, write, or append to.
   * @param encoding The encoding to use when reading, writing, or appending to the file.
   */
  constructor(fileName: string, encoding: BufferEncoding = 'utf8') {
    this.fileName = fileName;
    this.encoding = encoding;
  }

  /**
   * Writes data to the file.
   * @param data The data to write to the file.
   * @returns A Promise that resolves to a tuple containing a boolean indicating whether the write was successful, and an error message if it failed.
   */
  async write(data: string): Promise<[boolean, string | null]> {
    try {
      await fs.writeFile(this.fileName, data, { encoding: this.encoding });
      return [true, null];
    } catch (error: any) {
      return [false, error.message];
    }
  }

  /**
   * Reads data from the file.
   * @returns A Promise that resolves to a tuple containing a boolean indicating whether the read was successful, and the data read from the file or an error message if it failed.
   */
  async read(): Promise<[boolean, string | null]> {
    try {
      const data = await fs.readFile(this.fileName, this.encoding);
      return [true, data.toString()];
    } catch (error: any) {
      return [false, error.message];
    }
  }

  /**
   * Appends data to the file.
   * @param data The data to append to the file.
   * @returns A Promise that resolves to a tuple containing a boolean indicating whether the append was successful, and an error message if it failed.
   */
  async append(data: string): Promise<[boolean, string | null]> {
    try {
      await fs.appendFile(this.fileName, data, { encoding: this.encoding });
      return [true, null];
    } catch (error: any) {
      return [false, error.message];
    }
  }
}

export default IO;