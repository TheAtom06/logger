var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import fs from 'fs/promises';
/**
 * A class for reading, writing, and appending data to a file.
 */
class IO {
    /**
     * Creates a new instance of the FileJS class.
     * @param fileName The name of the file to read, write, or append to.
     * @param encoding The encoding to use when reading, writing, or appending to the file.
     */
    constructor(fileName, encoding = 'utf8') {
        this.fileName = fileName;
        this.encoding = encoding;
    }
    /**
     * Writes data to the file.
     * @param data The data to write to the file.
     * @returns A Promise that resolves to a tuple containing a boolean indicating whether the write was successful, and an error message if it failed.
     */
    write(data) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield fs.writeFile(this.fileName, data, { encoding: this.encoding });
                return [true, null];
            }
            catch (error) {
                return [false, error.message];
            }
        });
    }
    /**
     * Reads data from the file.
     * @returns A Promise that resolves to a tuple containing a boolean indicating whether the read was successful, and the data read from the file or an error message if it failed.
     */
    read() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield fs.readFile(this.fileName, this.encoding);
                return [true, data.toString()];
            }
            catch (error) {
                return [false, error.message];
            }
        });
    }
    /**
     * Appends data to the file.
     * @param data The data to append to the file.
     * @returns A Promise that resolves to a tuple containing a boolean indicating whether the append was successful, and an error message if it failed.
     */
    append(data) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield fs.appendFile(this.fileName, data, { encoding: this.encoding });
                return [true, null];
            }
            catch (error) {
                return [false, error.message];
            }
        });
    }
}
export default IO;
//# sourceMappingURL=file.js.map